{"version":3,"sources":["clients/enturClient.ts","utils/dateUtils.ts","components/LiveClock.tsx","components/RealTimeTrips.tsx","App.tsx","utils/reportWebVitals.ts","index.tsx"],"names":["enturClient","createEnturClient","clientName","getDepartures","fromStop","toStop","a","getDeparturesBetweenStopPlaces","limit","departures","console","log","getTimePart","dateTime","format","parseISO","LiveClock","date","React","useState","Date","time","setTime","useEffect","setInterval","RealTimeTrips","departureStop","setDepartureStop","arrivalStop","setArrivalStop","useSWR","data","mutate","useSWRConfig","length","quay","name","onClick","oldDeparture","map","departure","i","plannedDepartureTime","aimedDepartureTime","expectedDepartureTime","serviceJourney","journeyPattern","line","publicCode","destinationDisplay","frontText","App","className","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"4OAEMA,E,MAAcC,GAAkB,CAAEC,WAAY,mCAQvCC,EAAa,uCAAG,WAAOC,EAAkBC,GAAzB,eAAAC,EAAA,sEACFN,EAAYO,+BAA+BH,EAAUC,EAAQ,CAAEG,MAAO,IADpE,cACrBC,EADqB,OAE3BC,QAAQC,IAAIF,GAFe,kBAGpBA,GAHoB,2CAAH,wD,kBCRbG,EAAc,SAACC,GAAD,OACzBC,YAAOC,YAASF,GAAW,a,OCAhBG,EAAY,WAAO,IDEDC,ECFA,EACLC,IAAMC,SAAe,IAAIC,MADpB,mBACtBC,EADsB,KAChBC,EADgB,KAK7B,OAFAJ,IAAMK,WAAU,WAAQC,aAAY,kBAAMF,EAAQ,IAAIF,QAAS,QAExD,8BDHsBH,ECGFI,EDF3BP,YAAOG,EAAM,gBEGFQ,EAAgB,WAAO,IAAD,IACSP,IAAMC,SAJ9B,sBAGe,mBAC1BO,EAD0B,KACXC,EADW,OAEKT,IAAMC,SAJvB,sBAEY,mBAE1BS,EAF0B,KAEbC,EAFa,KAGnBpB,EAAeqB,YAAO,SAAS,kBAAM3B,EAAcuB,EAAeE,MAAxEG,KACAC,EAAWC,cAAXD,OACR,OAAKvB,EAGDA,GAAcA,EAAWyB,OAAS,EAC7B,oDAEF,gCACL,yDAAkBzB,EAAW,GAAG0B,YAAhC,aAAkB,EAAoBC,QACtC,wBAAQC,QAAS,WACf,IAAMC,EAAeZ,EACrBC,EAAiBC,GACjBC,EAAeS,GACfN,EAAO,UAJT,kBAMA,cAAC,EAAD,IACCvB,EAAW8B,KAAI,SAACC,EAAWC,GAAO,IAAD,EAC1BC,EAAuBF,EAAUG,mBACjCC,EAAwBJ,EAAUI,sBAExC,OACE,gCACE,2CAAOJ,EAAUK,eAAeC,sBAAhC,aAAO,EAAyCC,KAAKC,WAArD,IAAkER,EAAUS,mBAAmBC,UAA/F,OACA,+BAAOtC,EAAY8B,KAClBA,IAAyBE,GAAyB,+CAAkBhC,EAAYgC,QAHzEH,SAnBP,gDCHIU,MARf,WACE,OACE,qBAAKC,UAAU,MAAf,SACE,cAAC,EAAD,OCOSC,EAZS,SAACC,GACnBA,GAAeA,aAAuBC,UACxC,8BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCHdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,K","file":"static/js/main.5dfee218.chunk.js","sourcesContent":["import createEnturClient from '@entur/sdk';\n\nconst enturClient = createEnturClient({ clientName: 'hobbyprosjekt-springetiltbanen' });\n\nexport const getRealTimeTrips = async (fromStop: string, toStop: string) => {\n  const trips = await enturClient.getTripPatterns({ from: { place: fromStop }, to: { place: toStop } });\n  // console.log(trips);\n  return trips;\n};\n\nexport const getDepartures = async (fromStop: string, toStop: string) => {\n  const departures = await enturClient.getDeparturesBetweenStopPlaces(fromStop, toStop, { limit: 6 });\n  console.log(departures);\n  return departures;\n};\n","import { format, parseISO } from 'date-fns';\n\nexport const getTimePart = (dateTime: string) =>\n  format(parseISO(dateTime), 'HH:mm:ss');\n\nexport const formatTimePart = (date: Date) =>\n  format(date, 'HH:mm:ss');\n","import React from 'react';\nimport { formatTimePart } from '../utils/dateUtils';\n\nexport const LiveClock = () => {\n  const [time, setTime] = React.useState<Date>(new Date());\n\n  React.useEffect(() => { setInterval(() => setTime(new Date()), 1000); });\n\n  return <h4>{formatTimePart(time)}</h4>;\n};\n","import React from 'react';\nimport useSWR, { useSWRConfig } from 'swr';\nimport { getDepartures } from '../clients/enturClient';\nimport { getTimePart } from '../utils/dateUtils';\nimport { LiveClock } from './LiveClock';\n\nconst BolerStopId = 'NSR:StopPlace:5862';\nconst GronlandStopId = 'NSR:StopPlace:6488';\n\nexport const RealTimeTrips = () => {\n  const [departureStop, setDepartureStop] = React.useState(BolerStopId);\n  const [arrivalStop, setArrivalStop] = React.useState(GronlandStopId);\n  const { data: departures } = useSWR('trips', () => getDepartures(departureStop, arrivalStop));\n  const { mutate } = useSWRConfig();\n  if (!departures) {\n    return <p>Laster data...</p>;\n  }\n  if (departures && departures.length < 1) {\n    return <p>Fant ingen avganger</p>;\n  }\n  return <div>\n    <h2>Avganger fra {departures[0].quay?.name}</h2>\n    <button onClick={() => {\n      const oldDeparture = departureStop;\n      setDepartureStop(arrivalStop);\n      setArrivalStop(oldDeparture);\n      mutate('trips');\n    }}>Bytt</button>\n    <LiveClock />\n    {departures.map((departure, i) => {\n      const plannedDepartureTime = departure.aimedDepartureTime;\n      const expectedDepartureTime = departure.expectedDepartureTime;\n      // departure.legs[0].serviceJourney.\n      return (\n        <div key={i}>\n          <span>{departure.serviceJourney.journeyPattern?.line.publicCode} {departure.destinationDisplay.frontText} </span>\n          <span>{getTimePart(plannedDepartureTime)}</span>\n          {plannedDepartureTime !== expectedDepartureTime && <span> Forventet {getTimePart(expectedDepartureTime)}</span>}\n        </div>);\n    }\n    )}</div>;\n};\n","import React from 'react';\nimport './App.css';\nimport { RealTimeTrips } from './components/RealTimeTrips';\n\nfunction App () {\n  return (\n    <div className=\"App\">\n      <RealTimeTrips />\n    </div>\n  );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './utils/reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}