{"version":3,"sources":["clients/enturClient.ts","utils/dateUtils.ts","RealTimeTrips.tsx","App.tsx","utils/reportWebVitals.ts","index.tsx"],"names":["enturClient","createEnturClient","clientName","getRealTimeTrips","fromStop","toStop","a","getTripPatterns","from","place","to","trips","console","log","getTimePart","dateTime","format","parseISO","RealTimeTrips","tripData","useSWR","data","length","legs","fromPlace","name","toPlace","map","trip","plannedDepartureTime","fromEstimatedCall","aimedDepartureTime","expectedDepartureTime","id","App","className","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"oOAEMA,E,MAAcC,GAAkB,CAAEC,WAAY,mCAEvCC,EAAgB,uCAAG,WAAOC,EAAkBC,GAAzB,eAAAC,EAAA,sEACVN,EAAYO,gBAAgB,CAAEC,KAAM,CAAEC,MAAOL,GAAYM,GAAI,CAAED,MAAOJ,KAD5D,cACxBM,EADwB,OAE9BC,QAAQC,IAAIF,GAFkB,kBAGvBA,GAHuB,2CAAH,wD,kBCFhBG,EAAc,SAACC,GAAD,OACzBC,YAAOC,YAASF,GAAW,a,OCEhBG,EAAgB,WAAO,IACpBC,EAAaC,YAAO,QAAQ,kBAAMjB,EAAiB,qBAAsB,yBAA/EkB,KACR,OAAKF,EAGDA,GAAYA,EAASG,OAAS,EACzB,oDAEF,gCACL,+CAAmBH,EAAS,GAAGI,KAAK,GAAGC,UAAUC,KAAjD,QAA6DN,EAAS,GAAGI,KAAK,GAAGG,QAAQD,QACxFN,EAASQ,KAAI,SAAAC,GAAS,IAAD,IACdC,EAAoB,UAAGD,EAAKL,KAAK,GAAGO,yBAAhB,aAAG,EAAgCC,mBACvDC,EAAqB,UAAGJ,EAAKL,KAAK,GAAGO,yBAAhB,aAAG,EAAgCE,sBAC9D,OACE,gCACE,qDAAwBH,EAAuBf,EAAYe,GAAwB,SACnF,sDAAyBG,EAAwBlB,EAAYkB,GAAyB,WAF9EJ,EAAKK,UAXZ,gDCIIC,MARf,WACE,OACE,qBAAKC,UAAU,MAAf,SACE,cAAC,EAAD,OCOSC,EAZS,SAACC,GACnBA,GAAeA,aAAuBC,UACxC,8BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCHdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,K","file":"static/js/main.fe100fee.chunk.js","sourcesContent":["import createEnturClient from '@entur/sdk';\n\nconst enturClient = createEnturClient({ clientName: 'hobbyprosjekt-springetiltbanen' });\n\nexport const getRealTimeTrips = async (fromStop: string, toStop: string) => {\n  const trips = await enturClient.getTripPatterns({ from: { place: fromStop }, to: { place: toStop } });\n  console.log(trips);\n  return trips;\n};\n\nexport const getMatchingStopPlaces = (searchString: string) => {\n\n};\n","import { format, parseISO } from 'date-fns';\n\nexport const getTimePart = (dateTime: string) =>\n  format(parseISO(dateTime), 'HH:mm:ss');\n","import React from 'react';\nimport useSWR from 'swr';\nimport { getRealTimeTrips } from './clients/enturClient';\nimport { getTimePart } from './utils/dateUtils';\n\nexport const RealTimeTrips = () => {\n  const { data: tripData } = useSWR('test', () => getRealTimeTrips('NSR:StopPlace:5862', 'NSR:StopPlace:6488'));\n  if (!tripData) {\n    return <p>Laster data...</p>;\n  }\n  if (tripData && tripData.length < 1) {\n    return <p>Fant ingen avganger</p>;\n  }\n  return <div>\n    <h2>Avganger fra {(tripData[0].legs[0].fromPlace.name)} til {tripData[0].legs[0].toPlace.name}</h2>\n    {tripData.map(trip => {\n      const plannedDepartureTime = trip.legs[0].fromEstimatedCall?.aimedDepartureTime;\n      const expectedDepartureTime = trip.legs[0].fromEstimatedCall?.expectedDepartureTime;\n      return (\n        <div key={trip.id}>\n          <span>Planlagt avgang: {plannedDepartureTime ? getTimePart(plannedDepartureTime) : '---'}</span>\n          <span>Forventet avgang: {expectedDepartureTime ? getTimePart(expectedDepartureTime) : '---'}</span>\n        </div>);\n    }\n    )}</div>;\n};\n","import React from 'react';\nimport './App.css';\nimport { RealTimeTrips } from './RealTimeTrips';\n\nfunction App () {\n  return (\n    <div className=\"App\">\n      <RealTimeTrips />\n    </div>\n  );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './utils/reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}